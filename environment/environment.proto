syntax = "proto3";
package endpoints.terrariumai.environment;

import "google/protobuf/empty.proto";

// Taks we have to do
message Entity {
  // Unique integer identifier of the agent
  string id = 1;
  // Entity stats
  // 0: Empty
  // 1: Agent
  // 2: Rock
  // 3: Food
  uint32 classID = 2;
  uint32 x = 3;
  uint32 y = 4;
  uint32 energy = 5;
  uint32 health = 6;
  // Owner details
  string ownerUID = 7;
  string modelID = 8;
}

// Effects are manipulations of a cell that last a specific amount of time
message Effect {
  // Pos
  uint32 x = 1;
  uint32 y = 2;
  // Time of creation
  int64 timestamp = 3;
  // Class
  enum Class {
    NONE = 0;
    PHEROMONE = 1;
  }
  Class classID = 4;
  // Value, used for observation
  uint32 value = 5;
  // How fast it should decay
  float decay = 6;
  // Min before being deleted
  uint32 delThresh = 7;
}

// Request data to create new agent
message CreateEntityRequest {
  // agent
  Entity entity = 1;
}
// Contains data of created agent
message CreateEntityResponse {
  // ID of created agent
  string id = 1;
}

// Request data to read entity
message GetEntityRequest {
  // Unique integer identifier of the agent
  string id = 1;
}
// Contains entity data specified in by ID request
message GetEntityResponse {
  // Task entity read by ID
  Entity entity = 1;
}

// Request data to delete agent
message DeleteEntityRequest {
  // Unique integer identifier of the agent to delete
  string id = 1;
}
// Contains status of delete operation
message DeleteEntityResponse {
  // Contains number of entities have beed deleted
  // Equals 1 in case of successful delete
  int64 deleted = 1;
}

message ExecuteAgentActionRequest {
  // Id for the agent that should perform the action
  string id = 1;
  // identifier for the action
  // 0: WAIT
  // 1: MOVE
  // 2: EAT
  // 3: ATTACK
  uint32 action = 2;
  // direction to perform the action in
  // 0: UP
  // 1: DOWN
  // 2: LEFT
  // 3: RIGHT
  uint32 direction = 3;
}
message ExecuteAgentActionResponse {
  // Was the agent able to perform the action
  bool wasSuccessful = 1;
  // Is the agent still alive
  bool isAlive = 2;
}

message GetEntitiesInRegionRequest {
  uint32 x = 1;
  uint32 y = 2;
}
message GetEntitiesInRegionResponse {
  repeated Entity entities = 1;
}

message GetEffectsInRegionRequest {
  uint32 x = 1;
  uint32 y = 2;
}
message GetEffectsInRegionResponse {
  repeated Effect effects = 1;
}
// ----------------------
// -- Generic Entity
// ----------------------

// Service to manage simulation
service Environment {
  // Create new agent
  rpc CreateEntity(CreateEntityRequest) returns (CreateEntityResponse) {}
  // Get data for an entity
  rpc GetEntity(GetEntityRequest) returns (GetEntityResponse) {}
  // Delete an agent
  rpc DeleteEntity(DeleteEntityRequest) returns (DeleteEntityResponse) {}
  // Perform an action for an agent
  rpc ExecuteAgentAction(ExecuteAgentActionRequest)
      returns (ExecuteAgentActionResponse) {}
  // Reset the world
  rpc ResetWorld(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  // Spawn food in the world
  rpc SpawnFood(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  // Get Region
  rpc GetEntitiesInRegion(GetEntitiesInRegionRequest) returns (GetEntitiesInRegionResponse) {}
  rpc GetEffectsInRegion(GetEffectsInRegionRequest) returns (GetEffectsInRegionResponse) {}
}
