syntax = "proto3";
package pb;

// Message types
// Request - request some type of action
// Result  - result of a request
// Update  - get data

message SpawnAgentRequest {
  int32 X = 1;
  int32 Y = 2;
}
message SpawnAgentResult {
  string Id = 1;
}

message AgentObservationRequest {
  string Id = 1;
}
message AgentObservationResult {
  bool Alive = 1;
  repeated string Cells = 2;
  int32 Energy = 3;
  int32 Health = 4;
}

message ResetWorldRequest {}
message ResetWorldResult {}

message AgentActionRequest {
  // TODO - switch to enum instead of string for Action
  // enum ActionType {
  //   UP = 0;
  //   DOWN = 1;
  //   LEFT = 2;
  //   RIGHT = 3;
  // }
  // Id of the agent
  string Id = 1;
  // The action you would like to perform
  string Action = 2;
  // The direction the action should go
  string Direction = 3;
}
message AgentActionResult {
  // Whether or not the action was succesful
  // Could be unsuccesful if attempting to interract with an entity
  //  that is not in range, already consumed, etc.
  bool Successful = 1;
}

// TODO - implement this
message SpectateRequest {
  string Id = 1;
}
message CellUpdate {
  int32 X = 1;
  int32 Y = 2;
  string Occupant = 3;
}

message SubscribeToRegionRequest{
  // TODO - Put this in metadata instead of packet
  string Id = 1;
  int32 X = 2;
  int32 Y = 3;
}
message SubscribeToRegionResult {}

service Simulation {
  // Spawn a new agent
  rpc SpawnAgent(SpawnAgentRequest) returns (SpawnAgentResult) {}
  // Request observation data from an agent
  rpc AgentObservation(AgentObservationRequest) returns (AgentObservationResult) {}
  // Perform an action on behalf of an agent
  rpc AgentAction(AgentActionRequest) returns (AgentActionResult) {}
  // Reset the world
  rpc ResetWorld(ResetWorldRequest) returns (ResetWorldResult) {}
  // Spectate simulation
  rpc Spectate(SpectateRequest) returns (stream CellUpdate) {}
  // Subscribe to region
  rpc SubscribeToRegion(SubscribeToRegionRequest) returns (SubscribeToRegionResult) {}
}
