syntax = "proto3";
package olamai.endpoints.simulation;

import "annotations.proto";

message Empty {}

message Agent {
  string id = 1;
  int32 x = 2;
  int32 y = 3;
}

message Observation {
  bool alive = 1;
  repeated string cells = 2;
  int32 energy = 3;
  int32 health = 4;
}

message Action {
  string actionId = 1;
  string direction = 2;
}

message CellUpdate {
  int32 x = 1;
  int32 y = 2;
  string occupant = 3;
}

message Spectator {
  string id = 1;
}

message Region {
  int32 x = 1;
  int32 y = 2;
}

service Simulation {
  // Creates a new agent
  rpc CreateAgent(CreateAgentRequest) returns (Agent) {
    // Client example:
    //   curl -d '{"x":1, "y", 1}' http://DOMAIN_NAME/v1/agents
    option (google.api.http) = {
      post: "/v1/agents"
      body: "agent"
    };
  }
  // Returns a specific agent
  rpc GetAgent(GetAgentRequest) returns (Agent) {
    // Client example - returns the agent with id 1:
    //   curl http://DOMAIN_NAME/v1/shelves/1
    option (google.api.http) = { get: "/v1/agents/{agent}" };
  }
  // Deletes an agent
  rpc DeleteAgent(DeleteAgentRequest) returns (Empty) {
    // Client example - deletes the agent with id 2:
    //   curl -X DELETE http://DOMAIN_NAME/v1/agents/2
    option (google.api.http) = { delete: "/v1/agents/{agent}" };
  }
  // Perform agent action
  rpc ActionAgent(ActionAgentRequest) returns (Empty) {
    // Client example:
    //   curl -d '{"actionId":"MOVE", "direction": "UP"}' http://DOMAIN_NAME/v1/agents/1
    option (google.api.http) = {
      post: "/v1/agents/{agent}"
      body: "action"
    };
  }


  // Returns a specific book.
  rpc GetObservation(GetObservationRequest) returns (Observation) {
    // Client example - get the observation from agent 1
    //   curl http://DOMAIN_NAME/v1/observations/1
    option (google.api.http) = { get: "/v1/observations/{agent}" };
  }

  // Start a spectation stream
  rpc CreateSpectator(CreateSpectatorRequest) returns (stream CellUpdate) {
    option (google.api.http) = {
      post: "/v1/spectators"
      body: "spectator"
    };
  }
  // Subscribe a spectator to a region
  rpc SubscribeSpectator(SubscribeSpectatorRequest) returns (Empty) {
    // Client example:
    //   curl -d '{"actionId":"MOVE", "direction": "UP"}' http://DOMAIN_NAME/v1/agents/1
    option (google.api.http) = {
      post: "/v1/spectators/{spectator}"
      body: "region"
    };
  }
  // Reset the world
  rpc ResetWorld(Empty) returns (Empty) {
    option (google.api.http) = { delete: "/v1/world" };
  }
}

// Request message for CreateShelf method.
message CreateAgentRequest {
  // The shelf resource to create.
  Agent agent = 1;
}

// Request message for GetAgent method.
message GetAgentRequest {
  // The ID of the shelf resource to retrieve.
  string agent = 1;
}

// Request message for DeleteShelf method.
message DeleteAgentRequest {
  // The ID of the shelf to delete.
  string agent = 1;
}

message ActionAgentRequest {
  string agent = 1;
  Action action = 2;
}

// Request message for GetAgent method.
message GetObservationRequest {
  // The ID of the shelf resource to retrieve.
  string agent = 1;
}

message CreateSpectatorRequest {
  Spectator spectator = 1;
}
message SubscribeSpectatorRequest {
  string spectator = 1;
  Region region = 2;
}